[33mcommit 5657f1ce5e1feed7b16ba5cedd2a7413aed77604[m
Author: CzechChook <471798911@qq.com>
Date:   Wed Aug 31 08:57:29 2016 +0800

    Finish demo app

[1mdiff --git a/app/assets/javascripts/microposts.coffee b/app/assets/javascripts/microposts.coffee[m
[1mnew file mode 100644[m
[1mindex 0000000..24f83d1[m
[1m--- /dev/null[m
[1m+++ b/app/assets/javascripts/microposts.coffee[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32m# Place all the behaviors and hooks related to the matching controller here.[m
[32m+[m[32m# All this logic will automatically be available in application.js.[m
[32m+[m[32m# You can use CoffeeScript in this file: http://coffeescript.org/[m
[1mdiff --git a/app/assets/javascripts/users.coffee b/app/assets/javascripts/users.coffee[m
[1mnew file mode 100644[m
[1mindex 0000000..24f83d1[m
[1m--- /dev/null[m
[1m+++ b/app/assets/javascripts/users.coffee[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32m# Place all the behaviors and hooks related to the matching controller here.[m
[32m+[m[32m# All this logic will automatically be available in application.js.[m
[32m+[m[32m# You can use CoffeeScript in this file: http://coffeescript.org/[m
[1mdiff --git a/app/assets/stylesheets/microposts.scss b/app/assets/stylesheets/microposts.scss[m
[1mnew file mode 100644[m
[1mindex 0000000..c14d62c[m
[1m--- /dev/null[m
[1m+++ b/app/assets/stylesheets/microposts.scss[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32m// Place all the styles related to the Microposts controller here.[m
[32m+[m[32m// They will automatically be included in application.css.[m
[32m+[m[32m// You can use Sass (SCSS) here: http://sass-lang.com/[m
[1mdiff --git a/app/assets/stylesheets/scaffolds.scss b/app/assets/stylesheets/scaffolds.scss[m
[1mnew file mode 100644[m
[1mindex 0000000..4ce4266[m
[1m--- /dev/null[m
[1m+++ b/app/assets/stylesheets/scaffolds.scss[m
[36m@@ -0,0 +1,89 @@[m
[32m+[m[32mbody {[m
[32m+[m[32m  background-color: #fff;[m
[32m+[m[32m  color: #333;[m
[32m+[m[32m  font-family: verdana, arial, helvetica, sans-serif;[m
[32m+[m[32m  font-size: 13px;[m
[32m+[m[32m  line-height: 18px;[m
[32m+[m[32m  margin: 33px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mp, ol, ul, td {[m
[32m+[m[32m  font-family: verdana, arial, helvetica, sans-serif;[m
[32m+[m[32m  font-size: 13px;[m
[32m+[m[32m  line-height: 18px;[m
[32m+[m[32m  margin: 33px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mpre {[m
[32m+[m[32m  background-color: #eee;[m
[32m+[m[32m  padding: 10px;[m
[32m+[m[32m  font-size: 11px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32ma {[m
[32m+[m[32m  color: #000;[m
[32m+[m
[32m+[m[32m  &:visited {[m
[32m+[m[32m    color: #666;[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  &:hover {[m
[32m+[m[32m    color: #fff;[m
[32m+[m[32m    background-color: #000;[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mth {[m
[32m+[m[32m  padding-bottom: 5px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mtd {[m
[32m+[m[32m  padding-bottom: 7px;[m
[32m+[m[32m  padding-left: 5px;[m
[32m+[m[32m  padding-right: 5px;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdiv {[m
[32m+[m[32m  &.field, &.actions {[m
[32m+[m[32m    margin-bottom: 10px;[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#notice {[m
[32m+[m[32m  color: green;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m.field_with_errors {[m
[32m+[m[32m  padding: 2px;[m
[32m+[m[32m  background-color: red;[m
[32m+[m[32m  display: table;[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32m#error_explanation {[m
[32m+[m[32m  width: 450px;[m
[32m+[m[32m  border: 2px solid red;[m
[32m+[m[32m  padding: 7px;[m
[32m+[m[32m  padding-bottom: 0;[m
[32m+[m[32m  margin-bottom: 20px;[m
[32m+[m[32m  background-color: #f0f0f0;[m
[32m+[m
[32m+[m[32m  h2 {[m
[32m+[m[32m    text-align: left;[m
[32m+[m[32m    font-weight: bold;[m
[32m+[m[32m    padding: 5px 5px 5px 15px;[m
[32m+[m[32m    font-size: 12px;[m
[32m+[m[32m    margin: -7px;[m
[32m+[m[32m    margin-bottom: 0;[m
[32m+[m[32m    background-color: #c00;[m
[32m+[m[32m    color: #fff;[m
[32m+[m[32m  }[m
[32m+[m
[32m+[m[32m  ul li {[m
[32m+[m[32m    font-size: 12px;[m
[32m+[m[32m    list-style: square;[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mlabel {[m
[32m+[m[32m  display: block;[m
[32m+[m[32m}[m
[1mdiff --git a/app/assets/stylesheets/users.scss b/app/assets/stylesheets/users.scss[m
[1mnew file mode 100644[m
[1mindex 0000000..31a2eac[m
[1m--- /dev/null[m
[1m+++ b/app/assets/stylesheets/users.scss[m
[36m@@ -0,0 +1,3 @@[m
[32m+[m[32m// Place all the styles related to the Users controller here.[m
[32m+[m[32m// They will automatically be included in application.css.[m
[32m+[m[32m// You can use Sass (SCSS) here: http://sass-lang.com/[m
[1mdiff --git a/app/controllers/microposts_controller.rb b/app/controllers/microposts_controller.rb[m
[1mnew file mode 100644[m
[1mindex 0000000..c36ac0b[m
[1m--- /dev/null[m
[1m+++ b/app/controllers/microposts_controller.rb[m
[36m@@ -0,0 +1,74 @@[m
[32m+[m[32mclass MicropostsController < ApplicationController[m
[32m+[m[32m  before_action :set_micropost, only: [:show, :edit, :update, :destroy][m
[32m+[m
[32m+[m[32m  # GET /microposts[m
[32m+[m[32m  # GET /microposts.json[m
[32m+[m[32m  def index[m
[32m+[m[32m    @microposts = Micropost.all[m
[32m+[m[32m  end[m
[32m+[m
[32m+[m[32m  # GET /microposts/1[m
[32m+[m[32m  # GET /microposts/1.json[m
[32m+[m[32m  def show[m
[32m+[m[32m  end[m
[32m+[m
[32m+[m[32m  # GET /microposts/new[m
[32m+[m[32m  def new[m
[32m+[m[32m    @micropost = Micropost.new[m
[32m+[m[32m  end[m
[32m+[m
[32m+[m[32m  # GET /microposts/1/edit[m
[32m+[m[32m  def edit[m
[32m+[m[32m  end[m
[32m+[m
[32m+[m[32m  # POST /microposts[m
[32m+[m[32m  # POST /microposts.json[m
[32m+[m[32m  def create[m
[32m+[m[32m    @micropost = Micropost.new(micropost_params)[m
[32m+[m
[32m+[m[32m    respond_to do |format|[m
[32m+[m[32m      if @micropost.save[m
[32m+[m[32m        format.html { redirect_to @micropost, notice: 'Micropost was successfully created.' }[m
[32m+[m[32m        format.json { render :show, status: :created, location: @micropost }[m
[32m+[m[32m      else[m
[32m+[m[32m        format.html { render :new }[m
[32m+[m[32m        format.json { render json: @micropost.errors, status: :unprocessable_entity }[m
[32m+[m[32m      end[m
[32m+[m[32m    end[m
[32m+[m[32m  end[m
[32m+[m
[32m+[m[32m  # PATCH/PUT /microposts/1[m
[32m+[m[32m  # PATCH/PUT /microposts/1.json[m
[32m+[m[32m  def update[m
[32m+[m[32m    respond_to do |format|[m
[32m+[m[32m      if @micropost.update(micropost_params)[m
[32m+[m[32m        format.html { redirect_to @micropost, notice: 'Micropost was successfully updated.' }[m
[32m+[m[32m        format.json { render :show, status: :ok, location: @micropost }[m
[32m+[m[32m      else[m
[32m+[m[32m        format.html { render :edit }[m
[32m+[m[32m        format.json { render json: @micropost.errors, status: :unprocessable_entity }[m
[32m+[m[32m      end[m
[32m+[m[32m    end[m
[32m+[m[32m  end[m
[32m+[m
[32m+[m[32m  # DELETE /microposts/1[m
[32m+[m[32m  # DELETE /microposts/1.json[m
[32m+[m[32m  def destroy[m
[32m+[m[32m    @micropost.destroy[m
[32m+[m[32m    respond_to do |format|[m
[32m+[m[32m      format.html { redirect_to microposts_url, notice: 'Micropost was successfully destroyed.' }[m
[32m+[m[32m      format.json { head :no_content }[m
[32m+[m[32m    end[m
[32m+[m[32m  end[m
[32m+[m
[32m+[m[32m  private[m
[32m+[m[32m    # Use callbacks to share common setup or constraints between actions.[m
[32m+[m[32m    def set_micropost[m
[32m+[m[32m      @micropost = Micropost.find(params[:id])[m
[32m+[m[32m    end[m
[32m+[m
[32m+[m[32m    # Never trust parameters from t